generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  todos         Todo[]
  categories    Category[]
  notifications Notification[]
  sharedTodos   SharedTodo[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Todo {
  id          Int       @id @default(autoincrement())
  activity    String
  dueDate     DateTime?
  completed   Boolean   @default(false)
  priority    Priority  @default(MEDIUM)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId  Int?
  category    Category? @relation(fields: [categoryId], references: [id])
  sharedWith  SharedTodo[]
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  color     String   @default("#3B82F6") // Default blue color
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  todos     Todo[]
  createdAt DateTime @default(now())
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  todoId    Int?
}

model SharedTodo {
  id        Int      @id @default(autoincrement())
  todoId    Int
  todo      Todo     @relation(fields: [todoId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission Permission @default(VIEW)
  createdAt DateTime @default(now())

  @@unique([todoId, userId])
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum Permission {
  VIEW
  EDIT
  ADMIN
}